apply from: rootProject.rootDir.getAbsolutePath() + "/gradles/utils.gradle"

ext {
    gradlesPath = rootProject.rootDir.getAbsolutePath() + "/gradles/"
}

/** ******************************************************************************************/
buildscript {
    apply from: rootProject.rootDir.getAbsolutePath() + "/gradles/const.gradle"

    repositories {
        maven { url "https://maven.aliyun.com/repository/public/" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

/** ******************************************************************************************/

allprojects {
    group rootProject.name
    version "1.0.0"

    repositories {
        maven { url "https://maven.aliyun.com/repository/public/" }
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    configurations {
        all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
        all*.exclude group: "ch.qos.logback"
        all*.exclude group: "log4j"
    }

    configurations.all {
        //不使用缓存，使用仓库中最新的包
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds' // 动态版本 x.x.+
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'//  变化版本 x.x.x
        resolutionStrategy {
            force "com.google.guava:guava:${guavaVersion}"
            force "io.netty:netty-all:${nettyVersion}"

            force("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
            force("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
            force("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        }
    }
}

configure(getJavaProjects()) {
    apply from: gradlesPath + "java.gradle"
}

/** ******************************************************************************************/
